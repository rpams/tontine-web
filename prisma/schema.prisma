generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  emailVerified         Boolean                @default(false)
  image                 String?
  telephone             String?
  address               String?
  role                  Role                   @default(USER)
  banned                Boolean                @default(false)
  isActive              Boolean                @default(true)
  lastLoginAt           DateTime?
  loginCount            Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  adminActions          AuditLog[]             @relation("AdminActions")
  auditLogs             AuditLog[]
  reviewedVerifications IdentityVerification[] @relation("VerificationReviewer")
  identityVerification  IdentityVerification?
  notifications         Notification[]
  payments              Payment[]
  sessions              Session[]
  createdTontines       Tontine[]              @relation("TontineCreator")
  receivedInvitations   TontineInvitation[]    @relation("InvitedUser")
  sentInvitations       TontineInvitation[]    @relation("InviterUser")
  participations        TontineParticipant[]
  profile               UserProfile?

  @@map("user")
}

model Tontine {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  amountPerRound      Float
  totalAmountPerRound Float
  frequencyType       FrequencyType
  frequencyValue      Int                  @default(1)
  status              TontineStatus        @default(DRAFT)
  startDate           DateTime?
  endDate             DateTime?
  maxParticipants     Int?
  allowMultipleShares Boolean              @default(true)
  maxSharesPerUser    Int?                 @default(3)
  inviteCode          String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  creatorId           String
  creator             User                 @relation("TontineCreator", fields: [creatorId], references: [id])
  invitations         TontineInvitation[]
  participants        TontineParticipant[]
  rounds              TontineRound[]

  @@map("tontine")
}

model TontineParticipant {
  id             String         @id @default(cuid())
  sharesCount    Int            @default(1)
  totalCommitted Float
  isActive       Boolean        @default(true)
  joinedAt       DateTime       @default(now())
  userId         String
  tontineId      String
  payments       Payment[]
  tontine        Tontine        @relation(fields: [tontineId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  wonRounds      TontineRound[] @relation("RoundWinner")

  @@unique([userId, tontineId])
  @@map("tontine_participant")
}

model TontineRound {
  id                  String              @id @default(cuid())
  roundNumber         Int
  expectedAmount      Float
  collectedAmount     Float               @default(0)
  distributedAmount   Float               @default(0)
  dueDate             DateTime
  collectionStartDate DateTime
  completedAt         DateTime?
  status              TontineRoundStatus  @default(PENDING)
  tontineId           String
  winnerId            String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  payments            Payment[]
  tontine             Tontine             @relation(fields: [tontineId], references: [id], onDelete: Cascade)
  winner              TontineParticipant? @relation("RoundWinner", fields: [winnerId], references: [id])

  @@unique([tontineId, roundNumber])
  @@map("tontine_round")
}

model Payment {
  id            String             @id @default(cuid())
  amount        Float
  sharesCount   Int                @default(1)
  status        PaymentStatus      @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  paymentMethod String?
  transactionId String?
  notes         String?
  userId        String
  participantId String
  roundId       String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  participant   TontineParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  round         TontineRound       @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment")
}

model TontineInvitation {
  id          String           @id @default(cuid())
  email       String
  message     String?
  sharesCount Int              @default(1)
  status      InvitationStatus @default(PENDING)
  expiresAt   DateTime
  tontineId   String
  inviterId   String
  invitedId   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  invited     User?            @relation("InvitedUser", fields: [invitedId], references: [id])
  inviter     User             @relation("InviterUser", fields: [inviterId], references: [id])
  tontine     Tontine          @relation(fields: [tontineId], references: [id], onDelete: Cascade)

  @@map("tontine_invitation")
}

model UserProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  firstName             String?
  lastName              String?
  username              String?
  gender                String?
  dateOfBirth           DateTime?
  nationality           String?
  profession            String?
  phoneNumber           String?
  address               String?
  city                  String?
  country               String?
  postalCode            String?
  avatarUrl             String?
  profileImageUrl       String?
  preferredLanguage     String?   @default("fr")
  timezone              String?   @default("Africa/Dakar")
  showUsernameByDefault Boolean?  @default(false)
  isProfileComplete     Boolean?  @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

model IdentityVerification {
  id               String             @id @default(cuid())
  userId           String             @unique
  status           VerificationStatus @default(NOT_STARTED)
  submittedAt      DateTime?
  reviewedAt       DateTime?
  approvedAt       DateTime?
  documentType     DocumentType?
  documentNumber   String?
  firstName        String?
  lastName         String?
  dateOfBirth      DateTime?
  documentFrontUrl String?
  documentBackUrl  String?
  rejectionReason  String?
  adminNotes       String?
  reviewedById     String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  reviewer         User?              @relation("VerificationReviewer", fields: [reviewedById], references: [id])
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("identity_verification")
}

model Notification {
  id        String               @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  actionUrl String?
  priority  NotificationPriority @default(MEDIUM)
  isRead    Boolean              @default(false)
  readAt    DateTime?
  tontineId String?
  roundId   String?
  paymentId String?
  emailSent Boolean              @default(false)
  smsSent   Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  tableName String?
  recordId  String?
  userId    String?
  adminId   String?
  oldValues Json?
  newValues Json?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())
  admin     User?       @relation("AdminActions", fields: [adminId], references: [id])
  user      User?       @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String?  @default("general")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum TontineStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum FrequencyType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TontineRoundStatus {
  PENDING
  COLLECTING
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum VerificationStatus {
  NOT_STARTED
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum DocumentType {
  CNI
  PASSPORT
  DRIVING_LICENSE
}

enum NotificationType {
  TONTINE_INVITATION
  PAYMENT_DUE
  PAYMENT_RECEIVED
  ROUND_COMPLETED
  TONTINE_STARTED
  IDENTITY_VERIFIED
  SYSTEM_ANNOUNCEMENT
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AuditAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_VERIFIED
  TONTINE_CREATED
  TONTINE_UPDATED
  TONTINE_DELETED
  PAYMENT_CREATED
  PAYMENT_APPROVED
  ADMIN_LOGIN
  SETTINGS_CHANGED
}
